/******/

// webpackBootstrap

// The module cache

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// expose the modules object (__webpack_modules__)

// Load entry module and return exports

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

/************************************************************************/

/* 0 */

/***/

/* eslint-disable node/no-deprecated-api */

// alternative to using Object.keys for old browsers

// Copy static methods from Buffer

// Copy properties from require('buffer')

/* 1 */

// implementation from standard node.js 'util' module

// old school shim for old browsers

/* 2 */

/* WEBPACK VAR INJECTION */

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */

// Return an augmented `Uint8Array` instance, for best performance

// Fallback: Return an object instance of the Buffer class

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

// Common case.

// this throws if `array` is not a valid ArrayBuffer

// Writing a hex string, for example, that contains invalid characters will

// cause everything after the first invalid character to be ignored. (e.g.

// 'abxxcd' will be treated as 'ab')

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */

// Note: cannot use `length < kMaxLength()` here because that fails when

// length is NaN (which is otherwise coerced to zero.)

// Use a for loop to avoid recursion

// assume utf8

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,

// OR the last index of `val` in `buffer` at offset <= `byteOffset`.

//

// Arguments:

// - buffer - a Buffer to search

// - val - a string, Buffer, or number

// - byteOffset - an index into `buffer`; will be clamped to an int32

// - encoding - an optional encoding, relevant is val is a string

// - dir - true for indexOf, false for lastIndexOf

// Empty buffer means no match

// Normalize byteOffset

// Coerce to Number.

// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer

// Normalize byteOffset: negative offsets start from the end of the buffer

// Normalize val

// Finally, search either indexOf (if dir is true) or lastIndexOf

// Special case: looking for empty string/buffer always fails

// Search for a byte value [0-255]

// must be an even number of digits

// Node's code seems to be doing this and not & 0x7F..

// we did not generate a valid codePoint so insert a

// replacement char (U+FFFD) and advance only 1 byte

// encode to utf16 (surrogate pair dance)

// avoid extra slice()

// Decode in chunks to avoid "call stack size exceeded".

// Based on http://stackoverflow.com/a/22747272/680742, the browser with

// the lowest limit is Chrome, with 0x10000 args.

// We go 1 magnitude less, for safety

// eslint-disable-line eqeqeq

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

// typed array instances can be augmented

// chrome 9-10 lack `subarray`

// ie10 has broken `subarray`

/*
 * Export kMaxLength after typed array support is determined.
 */

// not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/

/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect

// Buffer instances.

// No need to verify that "this.length <= MAX_UINT32" since it's a read-only

// property of a typed array.

// This behaves neither like String nor Uint8Array in that we set start/end

// to their upper/lower bounds if the value passed is out of range.

// undefined is handled specially as per ECMA-262 6th Edition,

// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

// Return early if start > this.length. Done here to prevent potential uint32

// coercion fail below.

// Force coersion to uint32. This will also coerce falsey/NaN values to 0.

// Buffer#write(string)

// Warning: maxLength not taken into account in base64Write

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)

// Copy 0 bytes; we're done

// Fatal error conditions

// Are we oob?

// descending copy from end

// ascending copy from start

// Usage:

//    buffer.fill(number[, offset[, end]])

//    buffer.fill(buffer[, offset[, end]])

//    buffer.fill(string[, offset[, end]][, encoding])

// Handle string cases:

// Invalid ranges are not set to a default, so can range check early.

// HELPER FUNCTIONS

// ================

// is surrogate component

// last char was a lead

// no lead yet

// unexpected trail

// valid lead

// unpaired lead

// 2 leads in a row

// valid surrogate pair

// encode utf8

// Node converts strings with length < 2 to ''

// Node strips out invalid characters like \n and \t from the string, base64-js does not

// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

/* 3 */

// Utils

// Could use `inherits` module, but don't want to move from single file

// architecture yet.

// BN

// Reduction context

// 'a' - 'f'

// 'a'

// 2 ^ 53 (unsafe)

// Reverse the bytes

// Perhaps a Uint8Array

// Create possibly bigger array to ensure that it fits the number

// Scan 24-bit chunks and add them to the number

// NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb

// Initialize as zero

// Find length of limb in base

// Remove leading `0` from `this`

// -0 = 0

/*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

// Peel one iteration (compiler can't do it, because of code complexity)

// Sum all words with the same `i + j = k` and accumulate `ncarry`,

// note that ncarry could be >= 0x3ffffff

// TODO(indutny): it may be reasonable to omit it for users who don't need

// to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit

// multiplication (like elliptic secp256k1).

// var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));

// var groupBase = Math.pow(base, groupSize);

// NOTE: at this stage it is known that the top bit is set

// Assume big-endian

// Short-cut

// Return number of used bits in a BN

// Number of trailing zero bits

// Return negative clone of `this`

// Or `num` with `this` in-place

// Or `num` with `this`

// And `num` with `this` in-place

// b = min-length(num, this)

// And `num` with `this`

// Xor `num` with `this` in-place

// a.length > b.length

// Xor `num` with `this`

// Not ``this`` with ``width`` bitwidth

// Extend the buffer with leading zeroes

// Handle complete words

// Handle the residue

// And remove leading zeroes

// Set `bit` of `this`

// Add `num` to `this` in-place

// negative + positive

// positive + negative

// Add `num` to `this`

// Subtract `num` from `this` in-place

// this - (-num) = this + num

// -this - num = -(this + num)

// At this point both numbers are positive

// Optimization - zeroify

// a > b

// Copy rest of the words

// Subtract `num` from `this`

/* k = 0 */

/* k = 1 */

/* k = 2 */

/* k = 3 */

/* k = 4 */

/* k = 5 */

/* k = 6 */

/* k = 7 */

/* k = 8 */

/* k = 9 */

/* k = 10 */

/* k = 11 */

/* k = 12 */

/* k = 13 */

/* k = 14 */

/* k = 15 */

/* k = 16 */

/* k = 17 */

/* k = 18 */

// Polyfill comb

// Cooley-Tukey algorithm for FFT

// slightly revisited to rely on looping instead of recursion

// Returns binary-reversed representation of `x`

// Performs "tweedling" phase, therefore 'emulating'

// behaviour of the recursive algorithm

/* jshint maxdepth : false */

// Pad with zeroes

// Multiply `this` by `num`

// Multiply employing FFT

// In-place Multiplication

// Carry

// NOTE: lo is 27bit maximum

// `this` * `this`

// `this` * `this` in-place

// Math.pow(`this`, `num`)

// Skip leading zeroes

// Shift-left in-place

// TODO(indutny): implement me

// Shift-right in-place

// NOTE: `hint` is a lowest bit before trailing zeroes

// NOTE: if `extended` is present - it will be filled with destroyed bits

// Extended mode, copy masked part

// Push carried bits as a mask

// Shift-left

// Shift-right

// Test if n bit is set

// Fast case: bit is much higher than all existing words

// Check bit and return

// Return only lowers bits of number (in-place)

// Return only lowers bits of number

// Add plain number `num` to `this`

// Possible sign change

// Subtract plain number `num` from `this`

// Subtraction overflow

// Initialize quotient

// NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max

// (0x7ffffff)

// Denormalize

// NOTE: 1) `mode` can be set to `mod` to request mod only,

//       to `div` to request div only, or be absent to

//       request both div & mod

//       2) `positive` is true if unsigned mod is requested

// Both numbers are positive at this point

// Strip both numbers to approximate shift value

// Very short reduction

// Find `this` / `num`

// Find `this` % `num`

// Find Round(`this` / `num`)

// Fast case - exact division

// Round down

// Round up

// In-place division by number

// A * x + B * y = x

// This is reduced incarnation of the binary EEA

// above, designated to invert members of the

// _prime_ fields F(p) at a maximal speed

// Remove common factor of two

// Swap `a` and `b` to make `a` always bigger than `b`

// Invert number in the field F(num)

// And first word and num

// Increment at the bit position in-line

// Add bit and propagate, if needed

// Compare two numbers and return:

// 1 - if `this` > `num`

// 0 - if `this` == `num`

// -1 - if `this` < `num`

// Unsigned comparison

// At this point both numbers have the same sign

// A reduce context, could be using montgomery or something better, depending

// on the `m` itself.

// Square root over p

// Return negative clone of `this` % `red modulo`

// Prime numbers with efficient reduction

// Pseudo-Mersenne prime

// P = 2 ^ N - K

// 2 ^ 255 - 19

// Base reduction engine

// Assumes that `num` is less than `P^2`

// num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)

// 256 = 9 * 26 + 22

// Shift by 9 limbs

// K = 0x1000003d1 = [ 0x40, 0x3d1 ]

// bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

// Fast length reduction

// K = 0x13

// Exported mostly for testing purposes, use plain name instead

// Cached version of prime

// Fast case

// Tonelli-Shanks algorithm (Totally unoptimized and slow)

// Find Q and S, that Q * 2 ^ S = (P - 1)

// Montgomery method engine

/* 4 */

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/* 5 */

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

/* 6 */

// Protocols

/* 7 */

/* 8 */

/* 9 */

/* 10 */

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

/* 11 */

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

/* 12 */

/*#__PURE__*/

/* 13 */

/* 14 */

/* 15 */

/* 16 */

/** Detect free variable `self`. */

/* 17 */

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

/* 18 */

// Inspired by stringToUtf8ByteArray() in closure-library by Google

// https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143

// Apache License 2.0

// https://github.com/google/closure-library/blob/master/LICENSE

/* 19 */

/* 20 */

/** `Object#toString` result references. */

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

// The use of `Object#toString` avoids issues with the `typeof` operator

// in Safari 9 which returns 'object' for typed arrays and other constructors.

/* 21 */

/* 22 */

// module.parent = undefined by default

/* 23 */

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

/* 24 */

/* 25 */

// limit of Crypto.getRandomValues()

// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues

// Node supports requesting up to this number of bytes

// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48

// phantomjs needs to throw

// getRandomValues fails on IE if size == 0

// this is the max bytes crypto.getRandomValues

// can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues

// buffer.slice automatically checks if the end is past the end of

// the buffer so we don't have to here

/* 26 */

/* 27 */

// Copyright Joyent, Inc. and other Node contributors.

// Permission is hereby granted, free of charge, to any person obtaining a

// copy of this software and associated documentation files (the

// "Software"), to deal in the Software without restriction, including

// without limitation the rights to use, copy, modify, merge, publish,

// distribute, sublicense, and/or sell copies of the Software, and to permit

// persons to whom the Software is furnished to do so, subject to the

// following conditions:

// The above copyright notice and this permission notice shall be included

// in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS

// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN

// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,

// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.

// Since JS doesn't have multiple prototypal inheritance, this class

// prototypally inherits from Readable, and then parasitically from

// Writable.

/*<replacement>*/

/*</replacement>*/

// avoid scope creep, the keys array can then be collected

// the no-half-open enforcer

// if we allow half-open state, or if the writable side ended,

// then we're ok.

// no more data can be written.

// But allow more writes to happen in this tick.

// making it explicit this property is not enumerable

// because otherwise some prototype manipulation in

// userland will fail

// we ignore the value if the stream

// has not been initialized yet

// backward compatibility, the user is explicitly

// managing destroyed

/* 28 */

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */

/* 29 */

/* 30 */

/* 31 */

/* 32 */

/* 33 */

/* 34 */

// prototype class for hash functions

// zero (rem + 1) trailing bits, where (rem + 1) is the smallest

// non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize

// uint32

// uint64

/* 35 */

/**
 *  Conversion Utilities
 *
 */

///////////////////////////////

// Find the first non-zero entry

// If we started with zeros, strip them

// @TODO: Roll this into the above error as a numeric fault (overflow); next version, not backward compatible

// We can about (value == MAX_INT) to as well, since that may indicate we underflowed already

/* 36 */

// Unknown Error

// Not implemented

// Missing new operator to an object

//  - name: The name of the class

// Call exception

//  - transaction: the transaction

//  - address?: the contract address

//  - args?: The arguments passed into the function

//  - method?: The Solidity method signature

//  - errorSignature?: The EIP848 error signature

//  - errorArgs?: The EIP848 error parameters

//  - reason: The reason (only for EIP848 "Error(string)")

// Invalid argument (e.g. value is incompatible with type) to a function:

//   - argument: The argument name that was invalid

//   - value: The value of the argument

// Missing argument to a function:

//   - count: The number of arguments received

//   - expectedCount: The number of arguments expected

// Too many arguments

// Numeric Fault

//   - operation: the operation being executed

//   - fault: the reason this faulted

// Insufficien funds (< value + gasLimit * gasPrice)

//   - transaction: the transaction attempted

// Nonce has already been used

// The replacement fee for the transaction is too low

// Unsupported operation

//   - operation

// @TODO: Enum

// @TODO: Any??

// Make sure all forms of normalization are supported

/* 37 */

/* 38 */

// NOTE: These type checking functions intentionally don't use `instanceof`

// because it is fragile and can be easily faked with `Object.create()`.

// ES6 symbol

/* 39 */

/** Built-in value references. */

/* 40 */

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */

/* 41 */

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */

/* 42 */

// old-style streams.  Note that the pipe method (the only relevant

// part of this class) is overridden in the Readable class.

// Backwards-compat with node 0.4.x

// If the 'end' option is not supplied, dest.end() will be called when

// source gets the 'end' or 'close' events.  Only dest.end() once.

// don't leave dangling pipes when there are errors.

// Unhandled stream error in pipe.

// remove all the event listeners that were added.

// Allow for unix-like usage: A.pipe(B).pipe(C)

/* 43 */

/* 44 */

// Enough data, try updating

// Convert message to array, pad it, and join into 32bit blocks

// Process pending data in blocks

// Append length

/* 45 */

/* 46 */

/* 47 */

/* 48 */

/* 49 */

/* 50 */

/* 51 */

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

// Add methods to `ListCache`.

/* 52 */

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

/* 53 */

/* Built-in method references that are verified to be native. */

/* 54 */

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */

/* 55 */

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */

/* 56 */

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */

/* 57 */

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

/* 58 */

/** Used as references for various `Number` constants. */

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

/* 59 */

/* 60 */

// based on the aes implimentation in triple sec

// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js

// https://code.google.com/p/crypto-js/

// AES constants

// Compute double table

// Compute sbox

// Compute multiplication

// Compute inv sub bytes, inv mix columns tables

// swap

/* 61 */

/* eslint-disable camelcase */

/* 62 */

/* 63 */

// falls through

/* 64 */

/* 65 */

/* 66 */

// Normally, the page is loaded from http or https, so not specifying a protocol

// will result in a (valid) protocol-relative url. However, this won't work if

// the protocol is something else, like 'file:'

// Necessary for IPv6 addresses

// This may be a relative url. The browser should always be able to interpret it correctly.

// Also valid opts.auth, opts.mode

/* 67 */

// Backwards-compat with node 0.10.x

// By default EventEmitters will print a warning if more than 10 listeners are

// added to it. This is a useful default which helps finding memory leaks.

// To avoid recursion in the case that type === "newListener"! Before

// adding it to the listeners, first emit "newListener".

// Re-assign `events` because a newListener handler could have caused the

// this._events to be assigned to a new object

// Optimize the case of one listener. Don't need the extra array object.

// Adding the second element, need to change to array.

// Check for listener leak

// No error code for this since it is a Warning

// eslint-disable-next-line no-restricted-syntax

// Obviously not all Emitters should be limited to 10. This function allows

// that to be increased. Set to zero for unlimited.

// If there is no 'error' event listener then throw.

// Note: The comments on the `throw` lines are intentional, they show

// up in Node's output if this results in an unhandled exception.

// Unhandled 'error' event

// At least give some kind of context to the user

// Emits a 'removeListener' event if and only if the listener was removed.

// not listening for removeListener, no need to emit

// emit removeListener for all listeners on all events

// LIFO order

/* 68 */

// A bit simpler than readable streams.

// Implement an async ._write(chunk, encoding, cb), and it'll handle all

// the drain event emission and buffering.

// It seems a linked list but it is not

// there will be only 2 of these for each stream

/* </replacement> */

// Duplex streams are both readable and writable, but share

// the same options object.

// However, some cases require setting options to different

// values for the readable and the writable sides of the duplex stream.

// These options can be provided separately as readableXXX and writableXXX.

// object stream flag to indicate whether or not this stream

// contains buffers or objects.

// the point at which write() starts returning false

// Note: 0 is a valid value, means that we always return false if

// the entire buffer is not flushed immediately on write()

// cast to ints.

// if _final has been called

// drain event flag.

// at the start of calling end()

// when end() has been called, and returned

// when 'finish' is emitted

// has it been destroyed

// should we decode strings into buffers before passing to _write?

// this is here so that some node-core streams can optimize string

// handling at a lower level.

// Crypto is kind of old and crusty.  Historically, its default string

// encoding is 'binary' so we have to make this configurable.

// Everything else in the universe uses 'utf8', though.

// not an actual buffer we keep track of, but a measurement

// of how much we're waiting to get pushed to some underlying

// socket or file.

// a flag to see when we're in the middle of a write.

// when true all writes will be buffered until .uncork() call

// a flag to be able to tell if the onwrite cb is called immediately,

// or on a later tick.  We set this to true at first, because any

// actions that shouldn't happen until "later" should generally also

// not happen before the first write call.

// a flag to know if we're processing previously buffered items, which

// may call the _write() callback in the same tick, so that we don't

// end up in an overlapped onwrite situation.

// the callback that's passed to _write(chunk,cb)

// defer the callback if we are being called synchronously

// to avoid piling up things on the stack

// this can emit finish, and it will always happen

// after error

// the caller expect this to happen before if

// it is async

// this can emit finish, but finish must

// always follow error

// Check if we're actually ready to finish, but don't emit yet

// the callback that the user supplies to write(chunk,encoding,cb)

// the amount that is being written when _write is called.

// number of pending user-supplied write callbacks

// this must be 0 before 'finish' can be emitted

// emit prefinish if the only thing we're waiting for is _write cbs

// This is relevant for synchronous Transform streams

// True if the error was already emitted and should not be thrown again

// count buffered requests

// allocate the first CorkedRequest, there is always

// one allocated and free to use, and we maintain at most two

// Writable ctor is applied to Duplexes, too.

// `realHasInstance` is necessary because using plain `instanceof`

// would return false, as no `_writableState` property is attached.

// Trying to use the custom `instanceof` for Writable here will also break the

// Node.js LazyTransform implementation, which has a non-trivial getter for

// `_writableState` that would lead to infinite recursion.

// legacy.

// Otherwise people can pipe Writable streams, which is just wrong.

// Must force callback to be called on nextTick, so that we don't

// emit 'drain' before the write() consumer gets the 'false' return

// value, and has a chance to attach a 'drain' listener.

// if there's something in the buffer waiting, then process it

// Fast case, write everything using _writev()

// doWrite is almost always async, defer these to save a bit of time

// as the hot path ends with doWrite

// Slow case, write chunks one-by-one

// if we didn't call the onwrite immediately, then

// it means that we need to wait until it does.

// also, that means that the chunk and cb are currently

// being processed, so move the buffer counter past them.

// TODO: defer error events consistently everywhere, not just the cb

// Checks that a user-supplied chunk is valid, especially for the particular

// mode the stream is in. Currently this means that `null` is never accepted

// and undefined/non-string values are only allowed in object mode.

// if we're already writing something, then just put this

// in the queue, and wait our turn.  Otherwise, call _write

// If we return false, then we need a drain event, so set that flag.

// we must ensure that previous needDrain will not be reset to false.

// node::ParseEncoding() requires lower case.

// .end() fully uncorks

// ignore unnecessary end() calls.

/* 69 */

// Do not cache `Buffer.isEncoding` when checking encoding names as some

// modules monkey-patch it to support additional encodings

// undefined

// StringDecoder provides an interface for efficiently splitting a series of

// buffers into a series of JS strings without breaking apart multi-byte

// characters.

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a

// continuation byte. If an invalid byte is detected, -2 is returned.

// Checks at most 3 bytes at the end of a Buffer in order to detect an

// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)

// needed to complete the UTF-8 character (if applicable) are returned.

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.

// Validates as many continuation bytes for a multi-byte UTF-8 character as

// needed or are available. If we see a non-continuation byte where we expect

// one, we "replace" the validated continuation bytes we've seen so far with

// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding

// behavior. The continuation byte check is included three times in the case

// where all of the continuation bytes for a character exist in the same buffer.

// It is also done this way as a slight performance increase instead of using a

// loop.

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a

// partial character, the character's bytes are buffered until the required

// number of bytes are available.

// UTF-16LE typically needs two bytes per character, but even if we have an even

// number of bytes available, we need to check if we end on a leading/high

// surrogate. In that case, we need to wait for the next two bytes in order to

// decode the last character properly.

// For UTF-16LE we do not explicitly append special replacement characters if we

// end on a partial character, we simply let v8 handle that.

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)

// For UTF-8, a replacement character is added when ending on a partial

// character.

// Returns only complete characters in a Buffer

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer

/* 70 */

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be

// compiled once on the first module load.

// format a parsed object into a url string

// ensure it's an object, and not a string url.

// If it's an obj, this is a no-op.

// this way, you can call url_format() on strings

// to clean up potentially wonky urls.

// Special case for a simple path URL

// RFC 2396: characters not allowed for various reasons.

// Allowed by RFCs, but cause of XSS attacks.  Always escape these.

// Characters that are never ever allowed in a hostname.

// Note that any invalid chars are also handled, but these

// are the ones that are *expected* to be seen, so we fast-path

// them.

// protocols that can allow "unsafe" and "unwise" chars.

// protocols that never have a hostname.

// protocols that always contain a // bit.

// Copy chrome, IE, opera backslash-handling behavior.

// Back slashes before the query string get converted to forward slashes

// See: https://code.google.com/p/chromium/issues/detail?id=25916

// trim before proceeding.

// This is to support parse stuff like "  http://foo.com  \n"

// Try fast path regexp

// figure out if it's got a host

// user@server is *always* interpreted as a hostname, and url

// resolution will treat //foo/bar as host=foo,path=bar because that's

// how the browser resolves relative URLs.

// there's a hostname.

// the first instance of /, ?, ;, or # ends the host.

// If there is an @ in the hostname, then non-host chars *are* allowed

// to the left of the last @ sign, unless some host-ending character

// comes *before* the @-sign.

// URLs are obnoxious.

// ex:

// http://a@b@c/ => user:a@b host:c

// http://a@b?@c => user:a host:c path:/?@c

// v0.12 TODO(isaacs): This is not quite how Chrome does things.

// Review our test case against browsers more comprehensively.

// find the first instance of any hostEndingChars

// at this point, either we have an explicit point where the

// auth portion cannot go past, or the last @ char is the decider.

// Now we have a portion which is definitely the auth.

// Pull that off.

// atSign can be anywhere.

// the host is the remaining to the left of the first non-host char

// if we still have not hit it, then the entire thing is a host.

// pull out port.

// we've indicated that there is a hostname,

// so even if it's empty, it has to be present.

// if hostname begins with [ and ends with ]

// assume that it's an IPv6 address.

// validate a little.

// we replace non-ASCII char with a temporary placeholder

// we need this to make sure size of hostname is not

// broken by replacing non-ASCII by nothing

// we test again with ASCII char only

// hostnames are always lower case.

// IDNA Support: Returns a punycoded representation of "domain".

// It only converts parts of the domain name that

// have non-ASCII characters, i.e. it doesn't matter if

// you call it with a domain that already is ASCII-only.

// strip [ and ] from the hostname

// the host field still retains them, though

// now rest is set to the post-host stuff.

// chop off any delim chars.

// First, make 100% sure that any "autoEscape" chars get

// escaped, even if encodeURIComponent doesn't think they

// need to be.

// chop off from the tail first.

// got a fragment string.

//to support http.request

// no query string, but parseQueryString still requested

// finally, reconstruct the href based on what has been validated.

// only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.

// unless they had them to begin with.

// hash is always overridden, no matter what.

// even href="" will remove it.

// if the relative url is empty, then there's nothing left to do here.

// hrefs like //foo/bar always cut to the protocol.

// take everything except the protocol from relative

//urlParse appends trailing / to urls like http://www.example.com

// if it's a known url protocol, then changing

// the protocol does weird things

// first, if it's not file:, then we MUST have a host,

// and if there was a path

// to begin with, then we MUST have a path.

// if it is file:, then the host is dropped,

// because that's known to be hostless.

// anything else is assumed to be absolute.

// to support http.request

// if the url is a non-slashed url, then relative

// links like ../.. should be able

// to crawl up to the hostname, as well.  This is strange.

// result.protocol has already been set by now.

// Later on, put the first path part into the host field.

// it's absolute.

// it's relative

// throw away the existing file, and take the new path instead.

// just pull out the search.

// like href='?foo'.

// Put this after the other two cases because it simplifies the booleans

// no path at all.  easy.

// we've already handled the other stuff above.

// if a url ENDs in . or .., then it must get a trailing slash.

// however, if it ends in anything else non-slashy,

// then it must NOT get a trailing slash.

// if the path is allowed to go above the root, restore leading ..s

// put the host back

//to support request.http

/* 71 */

/** @class */

// TODO: set event.currentTarget?

/* 72 */

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */

// We try to not inherit from `Object.prototype`. In some engines creating an

// instance in this way is faster than calling `Object.create(null)` directly.

// If `Object.create(null)` is not supported we prefix the event names with a

// character to make sure that the built-in object properties are not

// overridden or used as an attack vector.

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */

// This hack is needed because the `__proto__` property is still inherited in

// some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */

// Reset the array, or remove it completely if we have no more listeners.

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */

// Alias methods names because people roll like that.

// Expose the prefix.

// Allow `EventEmitter` to be imported as module namespace.

/* 73 */

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

// Add methods to `Stack`.

/* 74 */

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

/* 75 */

/* 76 */

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

// Add methods to `MapCache`.

/* 77 */

/** Detect free variable `exports`. */

/* 78 */

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */

/* 79 */

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */

/* 80 */

// Use `util.types` for Node.js 10+.

// Legacy `process.binding('util')` for Node.js < 10.

/* 81 */

/** Used for built-in method references. */

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */

/* 82 */

/* 83 */

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */

/* 84 */

// This was ported from https://github.com/emn178/js-sha3, with some minor

// modifications and pruning. It is licensed under MIT:

// Copyright 2015-2016 Chen, Yi-Cyuan

//  

// Permission is hereby granted, free of charge, to any person obtaining

// a copy of this software and associated documentation files (the

// distribute, sublicense, and/or sell copies of the Software, and to

// permit persons to whom the Software is furnished to do so, subject to

// the following conditions:

// 

// The above copyright notice and this permission notice shall be

// included in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE

// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION

// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION

// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// update

// finalize

// toString

/* 85 */

/** Used to match property names within property paths. */

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */

/* 86 */

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

/* 87 */

// c <= 0xffff

/* 88 */

// state

// create padding and handle blocks

// produce result

/* 89 */

// computation

// if (i<80) {

// update state

/* 90 */

/* 91 */

/* 92 */

/* 93 */

/* 94 */

/* 95 */

// Proxy hash functions to the main object

/* 96 */

/* 97 */

/* 98 */

/* 99 */

// The xhr request to example.com may violate some restrictive CSP configurations,

// so if we're running in a browser that supports `fetch`, avoid calling getXHR()

// and assume support for certain features below.

// Cache the xhr value

// If XDomainRequest is available (ie only, where xhr might not work

// cross domain), use the page location. Otherwise use example.com

// Note: this doesn't actually make an http request.

// Service workers don't have XHR

// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.

// Safari 7.1 appears to have fixed this bug.

// If fetch is supported, then arraybuffer will be supported too. Skip calling

// checkTypeSupport(), since that calls getXHR().

// These next two tests unavoidably show warnings in Chrome. Since fetch will always

// be used if it's available, just return false for these to avoid the warnings.

// If fetch is supported, then overrideMimeType will be supported too. Skip calling

// getXHR().

/* 100 */

// Fake the 'close' event, but only once 'end' fires

// The nextTick is necessary to prevent the 'request' module from causing an infinite loop

// pipeTo method isn't defined. Can't find a better way to feature test this

// fallback for when writableStream or pipeTo aren't available

// best guess

// For IE9

// This fails in IE8

// Falls through in IE8	

// This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4

// take whole

// reader.onerror = ??? // TODO: this

// The ms-stream case handles end separately in reader.onload()

/* 101 */

// object stream flag. Used to make read(n) ignore n and to

// make all the buffer merging and length checks go away

// the point at which it stops calling _read() to fill the buffer

// Note: 0 is a valid value, means "don't call _read preemptively ever"

// A linked list is used to store data chunks instead of an array because the

// linked list can remove elements from the beginning faster than

// array.shift()

// a flag to be able to tell if the event 'readable'/'data' is emitted

// immediately, or on a later tick.  We set this to true at first, because

// any actions that shouldn't happen until "later" should generally also

// not happen before the first read call.

// whenever we return null, then we set a flag to say

// that we're awaiting a 'readable' event emission.

// the number of writers that are awaiting a drain event in .pipe()s

// if true, a maybeReadMore has been scheduled

// legacy

// emit 'readable' now to make sure it gets picked up.

// Don't emit readable right away in sync mode, because this can trigger

// another read() call => stack overflow.  This way, it might trigger

// a nextTick recursion warning, but that's not so bad.

// if it's past the high water mark, we can push in some more.

// Also, if we have no data yet, we can stand some

// more bytes.  This is to work around cases where hwm=0,

// such as the repl.  Also, if the push() triggered a

// readable event, and the user called read(largeNumber) such that

// needReadable was set, then we ought to push more, so that another

// 'readable' event will be triggered.

// update the buffer info.

// Manually shove something into the read() buffer.

// This returns true if the highWaterMark has not been hit yet,

// similar to how Writable.write() returns true if you should

// write() some more.

// Unshift should *always* be something directly out of read()

// backwards compatibility.

// Don't raise the hwm > 8MB

// This function is designed to be inlinable, so please take care when making

// changes to the function body.

// Only flow one buffer at a time

// If we're asking for more than the current hwm, then raise the hwm.

// Get the next highest power of 2 to prevent increasing hwm excessively in

// tiny amounts

// Don't have enough

// you can override either this method, or the async _read(n) below.

// at this point, the user has presumably seen the 'readable' event,

// and called read() to consume some data.  that may have triggered

// in turn another _read(n) call, in which case reading = true if

// it's in progress.

// However, if we're not ended, or reading, and the length < hwm,

// then go ahead and try to read some more preemptively.

// abstract method.  to be overridden in specific implementation classes.

// call cb(er, data) where data is <= n in length.

// for virtual (non-string, non-buffer) streams, "length" is somewhat

// arbitrary, and perhaps not very meaningful.

// pause() and resume() are remnants of the legacy readable stream API

// If the user uses them, then switch into old mode.

// wrap an old-style stream as the async data source.

// This is *not* part of the readable stream interface.

// It is an ugly unfortunate mess of history.

// Pluck off n bytes from an array of buffers.

// Length is the combined lengths of all the buffers in the list.

// nothing buffered

// read it all, truncate the list

// read part of list

// Extracts only enough buffered data to satisfy the amount requested.

// slice is the same for buffers and strings

// first chunk is a perfect match

// Copies a specified amount of characters from the list of buffered data

// chunks.

// Copies a specified amount of bytes from the list of buffered data chunks.

// If we get here before consuming all the bytes, then that is a

// bug in node.  Should never happen.

// Check that we didn't get one last unshift.

// if we're doing read(0) to trigger a readable event, but we

// already have a bunch of data in the buffer, then just trigger

// the 'readable' event and move on.

// if we've ended, and we're now clear, then finish it up.

// All the actual chunk generation logic needs to be

// *below* the call to _read.  The reason is that in certain

// synthetic stream cases, such as passthrough streams, _read

// may be a completely synchronous operation which may change

// the state of the read buffer, providing enough data when

// before there was *not* enough.

// So, the steps are:

// 1. Figure out what the state of things will be after we do

// a read from the buffer.

// 2. If that resulting state will trigger a _read, then call _read.

// Note that this may be asynchronous, or synchronous.  Yes, it is

// deeply ugly to write APIs this way, but that still doesn't mean

// that the Readable class should behave improperly, as streams are

// designed to be sync/async agnostic.

// Take note if the _read call is sync or async (ie, if the read call

// has returned yet), so that we know whether or not it's safe to emit

// 'readable' etc.

// 3. Actually pull the requested chunks out of the buffer and return.

// if we need a readable event, then we need to do some reading.

// if we currently have less than the highWaterMark, then also read some

// however, if we've ended, then there's no point, and if we're already

// reading, then it's unnecessary.

// if the length is currently zero, then we *need* a readable event.

// call internal read method

// If _read pushed data synchronously, then `reading` will be false,

// and we need to re-evaluate how much data we can return to the user.

// If we have nothing in the buffer, then we want to know

// as soon as we *do* get something into the buffer.

// If we tried to read() past the EOF, then emit end on the next tick.

// cleanup event handlers once the pipe is broken

// if the reader is waiting for a drain event from this

// specific writer, then it would cause it to never start

// flowing again.

// So, if this is awaiting a drain, then we just call it now.

// If we don't know, then assume that we are waiting for one.

// when the dest drains, it reduces the awaitDrain counter

// on the source.  This would be more elegant with a .once()

// handler in flow(), but adding and removing repeatedly is

// too slow.

// If the user pushes more data while we're writing to dest then we'll end up

// in ondata again. However, we only want to increase awaitDrain once because

// dest will only emit one 'drain' event for the multiple writes.

// => Introduce a guard on increasing awaitDrain.

// If the user unpiped during `dest.write()`, it is possible

// to get stuck in a permanently paused state if that write

// also returned false.

// => Check whether `dest` is still a piping destination.

// if the dest has an error, then stop piping into it.

// however, don't suppress the throwing behavior for this.

// Make sure our error handler is attached before userland ones.

// Both close and finish should trigger unpipe, but only once.

// tell the dest that it's being piped to

// Sadly this is not cacheable as some libraries bundle their own

// event emitter implementation with them.

// This is a hack to make sure that our error handler is attached before any

// userland ones.  NEVER DO THIS. This is here only because this code needs

// to continue to work with older versions of Node.js that do not include

// the prependListener() method. The goal is to eventually remove this hack.

// start the flow if it hasn't been started already.

// if we're not piping anywhere, then do nothing.

// just one destination.  most common case.

// passed in one, but it's not the right one.

// got a match.

// slow case. multiple pipe destinations.

// remove all.

// try to find the right one.

// set up data events if they are asked for

// Ensure readable listeners eventually get something

// Start flowing on next tick if stream isn't explicitly paused

// proxy all the other methods.

// important when wrapping filters and duplexes.

// don't skip over falsy values in objectMode

// proxy certain important events.

// when we try to consume some more bytes, simply unpause the

// underlying stream.

// exposed for testing purposes only.

/* 102 */

/* 103 */

// undocumented cb() API, needed for core, not for public API

// we set destroyed to true before firing error callbacks in order

// to make it re-entrance safe in case destroy() is called within callbacks

// if this is a duplex stream mark the writable part as destroyed as well

/* 104 */

// a transform stream is a readable/writable stream where you do

// something with the data.  Sometimes it's called a "filter",

// but that's not a great name for it, since that implies a thing where

// some bits pass through, and others are simply ignored.  (That would

// be a valid example of a transform, of course.)

// While the output is causally related to the input, it's not a

// necessarily symmetric or synchronous transformation.  For example,

// a zlib stream might take multiple plain-text writes(), and then

// emit a single compressed chunk some time in the future.

// Here's how this works:

// The Transform stream has all the aspects of the readable and writable

// stream classes.  When you write(chunk), that calls _write(chunk,cb)

// internally, and returns false if there's a lot of pending writes

// buffered up.  When you call read(), that calls _read(n) until

// there's enough pending readable data buffered up.

// In a transform stream, the written data is placed in a buffer.  When

// _read(n) is called, it transforms the queued up data, calling the

// buffered _write cb's as it consumes chunks.  If consuming a single

// written chunk would result in multiple output chunks, then the first

// outputted bit calls the readcb, and subsequent chunks just go into

// the read buffer, and will cause it to emit 'readable' if necessary.

// This way, back-pressure is actually determined by the reading side,

// since _read has to be called to start processing a new chunk.  However,

// a pathological inflate type of transform can cause excessive buffering

// here.  For example, imagine a stream where every byte of input is

// interpreted as an integer from 0-255, and then results in that many

// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in

// 1kb of data being output.  In this case, you could write a very small

// amount of input, and end up with a very large amount of output.  In

// such a pathological inflating mechanism, there'd be no way to tell

// the system to stop doing the transform.  A single 4MB write could

// cause the system to run out of memory.

// However, even in such a pathological case, only a single written chunk

// would be consumed, and then the rest would wait (un-transformed) until

// the results of the previous transformed chunk were consumed.

// single equals check for both `null` and `undefined`

// start out asking for a readable event once data is transformed.

// we have implemented the _read method, and done the other things

// that Readable wants before the first _read call, so unset the

// sync guard flag.

// When the writable side finishes, then flush out anything remaining.

// if there's nothing in the write buffer, then that means

// that nothing more will ever be provided

// This is the part where you do stuff!

// override this function in implementation classes.

// 'chunk' is an input chunk.

// Call `push(newChunk)` to pass along transformed output

// to the readable side.  You may call 'push' zero or more times.

// Call `cb(err)` when you are done with this chunk.  If you pass

// an error, then that'll put the hurt on the whole operation.  If you

// never call cb(), then you'll never get another chunk.

// Doesn't matter what the args are here.

// _transform does all the work.

// That we got here means that the readable side wants more data.

// mark that we need a transform, so that any data that comes in

// will get processed, now that we've asked for it.

/* 105 */

/*! https://mths.be/punycode v1.4.1 by @mathias */

/** Detect free variables */

/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */

/** Highest positive signed 32-bit float value */

// aka. 0x7FFFFFFF or 2^31-1

/** Bootstring parameters */

// 0x80

// '\x2D'

/** Regular expressions */

// unprintable ASCII chars + non-ASCII chars

// RFC 3490 separators

/** Error messages */

/** Convenience shortcuts */

/*--------------------------------------------------------------------------*/

/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */

/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */

/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */

// In email addresses, only the domain name should be punycoded. Leave

// the local part (i.e. everything up to `@`) intact.

// Avoid `split(regex)` for IE8 compatibility. See #17.

/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */

// high surrogate, and there is a next character

// low surrogate

// unmatched surrogate; only append this code unit, in case the next

// code unit is the high surrogate of a surrogate pair

/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */

/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */

/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */

//  0..25 map to ASCII a..z or A..Z

// 26..35 map to ASCII 0..9

/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */

/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */

// Don't use UCS-2

/** Cached calculation results */

// Handle the basic code points: let `basic` be the number of input code

// points before the last delimiter, or `0` if there is none, then copy

// the first basic code points to the output.

// if it's not a basic code point

// Main decoding loop: start just after the last delimiter if any basic code

// points were copied; start at the beginning otherwise.

// `index` is the index of the next character to be consumed.

// Decode a generalized variable-length integer into `delta`,

// which gets added to `i`. The overflow checking is easier

// if we increase `i` as we go, then subtract off its starting

// value at the end to obtain `delta`.

// `i` was supposed to wrap around from `out` to `0`,

// incrementing `n` each time, so we'll fix that now:

// Insert `n` at position `i` of the output

/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */

/** `inputLength` will hold the number of code points in `input`. */

// Convert the input in UCS-2 to Unicode

// Handle the basic code points

// Cache the length

// Initialize the state

// Main encoding loop:

// `handledCPCount` is the number of code points that have been handled;

// `basicLength` is the number of basic code points.

// Finish the basic string - if it is not empty - with a delimiter

// All non-basic code points < n have been handled already. Find the next

// larger one:

// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,

// but guard against overflow

// Represent delta as a generalized variable-length integer

/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */

/** Define the public API */

/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */

/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */

/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */

/* 106 */

/* 107 */

/** Detect free variable `global` from Node.js. */

/* 108 */

/** Used to compose bitmasks for cloning. */

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */

/* 109 */

/** Used to resolve the decompiled source of functions. */

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

/* 110 */

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

/* 111 */

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

/* 112 */

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

// Safari 9 has enumerable `arguments.length` in strict mode.

// Node.js 0.10 has enumerable non-index properties on buffers.

// PhantomJS 2 has enumerable non-index properties on typed arrays.

// Skip index properties.

/* 113 */

/* 114 */

/** Used to detect unsigned integer values. */

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */

/* 115 */

/* Node.js helper references. */

/* 116 */

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

/* 117 */

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */

/* 118 */

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */

/* 119 */

/* Built-in method references for those with the same name as other `lodash` methods. */

/* 120 */

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */

/* 121 */

/* 122 */

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

/* 123 */

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */

/* 124 */

/* 125 */

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */

/* 126 */

/**
 * Returns a BN object, converts a number value to a BN
 * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object
 * @return {Object} `output` BN object of the number
 * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number
 */

// eslint-disable-line

/* 127 */

/**
 * Removes '0x' from a given `String` is present
 * @param {String} str the string value
 * @return {String|Optional} a string by pass if necessary
 */

/* 128 */

/**
 * Returns a `Boolean` on whether or not the a `String` starts with '0x'
 * @param {String} str the string input value
 * @return {Boolean} a boolean if it is or is not hex prefixed
 * @throws if the str input is not a string
 */

/* 129 */

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

/* 130 */

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */

/* 131 */

/** Used to compose bitmasks for value comparisons. */

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */

// Assume cyclic values are equal.

// Ignore non-index properties.

// Recursively compare arrays (susceptible to call stack limits).

/* 132 */

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */

/* 133 */

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

/* 134 */

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */

/* 135 */

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */

/* 136 */

/* 137 */

/* 138 */

// consume data

// update length

// reset state

/* 139 */

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

// new Array(64)

/* 140 */

// t2 = sigma0 + maj

/* 141 */

/* 142 */

/* 143 */

/* 144 */

// default in iojs

/* eslint no-self-compare: 0 */

/* 145 */

/* istanbul ignore next */

/* 146 */

/* 147 */

/* 148 */

/* 149 */

/* 150 */

/* 151 */

/* 152 */

/* 153 */

// this is what openssl does

/* 154 */

// Generage random bytes until a number less than n is found.

// This ensures that 0..n-1 have an equal probability of being selected.

// Generate a random number greater than or equal to start and less than stop.

// Find d and s, (n - 1) = (2 ^ s) * d;

/* 155 */

// Emulate crypto API using randy

// Modern browsers

// IE

// Old junk

// Node.js or Web worker with no crypto support

/* 156 */

/* 157 */

/* 158 */

/* 159 */

// 32 x 32bit words

// i - 2

/* 160 */

// Return skipped data

// Share reporter state

/* 161 */

// Helper

// Convert key to integer if it is stringified

/* 162 */

// Construct base tree

// Tree methods

// Utility methods

// Multi-octet tag - load

// Indefinite form

// Definite form

// Short form

// Long form

// Failure

// Indefinite length... find END tag

// Bigint, return as it is (assume big endian)

/* 163 */

// Count octets required to store length

// Count number of octets

// Bignum, assume big endian

/* 164 */

/* 165 */

/* 166 */

/* 167 */

/* 168 */

// Unique ID creation requires a high quality random # generator.  In the

// browser this is a little complicated due to unknown quality of Math.random()

// and inconsistent support for the `crypto` API.  We do the best we can via

// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto

// implementation. Also, find the complete implementation of crypto on IE11.

// WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto

// eslint-disable-line no-undef

// Math.random()-based (RNG)

// If all else fails, use Math.random().  It's fast, but is of unspecified

// quality.

/* 169 */

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

// join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4

/* 170 */

/* 171 */

/* 172 */

/**
 *  BigNumber
 *
 *  A wrapper around the BN.js object. We use the BN.js library
 *  because it is used by elliptic, so it is required regardles.
 *
 */

/* 173 */

// There are some issues with instanceof with npm link, so we use this

// to ensure types are what we expect.

// Opaque objects are not mutable, so safe to copy by assignment

// Arrays are mutable, so we need to create a copy

// Some internal objects, which are already immutable

// The function type is also immutable, so safe to copy by assignment

// See: https://github.com/isaacs/inherits/blob/master/inherits_browser.js

/* 174 */

/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.5.7
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2016
 * @license MIT
 */

/*jslint bitwise: true */

/* 175 */

/* 176 */

/* 177 */

/* 178 */

/* 179 */

/* 180 */

// base64 is 4/3 + up to two characters of the original data

// must be multiple of 3

// go through the array every three bytes, we'll deal with trailing stuff later

// pad the end with zeros, but make sure to not forget the extra bytes

// Support decoding URL-safe base64 strings, as Node.js does.

// See: https://en.wikipedia.org/wiki/Base64#URL_applications

// Trim off extra bytes after placeholder bytes are found

// See: https://github.com/beatgammit/base64-js/issues/42

/* 181 */

/* 182 */

/**
 * Expose a W3C WebSocket class with just one or two arguments.
 */

/**
	 * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket
	 * class). Since it is an Object it will be returned as it is when creating an
	 * instance of W3CWebSocket via 'new W3CWebSocket()'.
	 *
	 * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2
	 */

/**
 * Module exports.
 */

/* 183 */

/* 184 */

/* 185 */

/* 186 */

// TODO: UNSENT?

// TODO: is type right?

// TODO: type?

// TODO

/* 187 */

// If the use of XHR should be preferred. Not typically needed.

// If streaming is a high priority but binary compatibility and

// the accuracy of the 'content-type' header aren't

// If streaming is more important than preserving the 'content-type' header

// Use binary if text streaming may corrupt data or the content-type header, or for speed

// This check is not necessary, but it prevents warnings from browsers about setting unsafe

// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but

// http-browserify did it, so I will too.

// create flattened list of headers

// Can't set responseType on really old browsers

// Necessary for streaming in Firefox, since xhr.response is ONLY defined

// in onprogress, not in onreadystatechange with xhr.readyState = 3

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method

/* 188 */

/* (ignored) */

/* 189 */

/* 190 */

/* 191 */

// DOM APIs, for completeness

// Does not start the time, just sets up the members needed.

// setimmediate attaches itself to the global object

// On some exotic environments, it's not clear which object `setimmediate` was

// able to install onto.  Search each possibility in the same order as the

// `setimmediate` library.

/* 192 */

// Spec says greater than zero

// Don't get fooled by e.g. browserify environments.

// The test against `importScripts` prevents this implementation from being installed inside a web worker,

// where `global.postMessage` means something completely different and can't be used for this purpose.

// For web workers, where supported

// For IE 6–8

// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted

// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.

// For non-IE10 modern browsers

// Callback can either be a function or a string

// Copy function arguments

// Store and register the task

// From the spec: "Wait until any invocations of this algorithm started before this one have completed."

// So if we're currently running a task, we'll need to delay this invocation.

// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a

// "too much recursion" error.

/* 193 */

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

// accessing global.localStorage can trigger a DOMException in sandboxed iframes

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

/* 194 */

// a passthrough stream.

// basically just the most minimal sort of Transform stream.

// Every written chunk gets output as-is.

/* 195 */

// If the buffer is backed by a Uint8Array, a faster version will work

// If the buffer isn't a subarray, return the underlying ArrayBuffer

// Otherwise we need to get a proper copy

// This is the slow version that will work with any Buffer

// implementation (even in old browsers)

/* 196 */

/* 197 */

/* 198 */

/* 199 */

/* 200 */

// If obj.hasOwnProperty has been overridden, then calling

// obj.hasOwnProperty(prop) will break.

// See: https://github.com/joyent/node/issues/1707

// maxKeys <= 0 means that we should not limit keys count

/* 201 */

/* 202 */

/* 203 */

/* 204 */

/* 205 */

/* 206 */

/* jshint node: true */

//how to define default?

//httponly

//name: [Cookie]

//Delete the cookie if the set is past the current time

//returns a cookie

//returns a list of cookies

// we already checked if the domains were exactly the same

//returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.

/* 207 */

// Extract from the back.

// Sanitize what is left of the address

// Extract from the front.

// Set left over value.

// RegExp the back.

/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */

/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @public
 */

/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */

/**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @return {ProtocolExtract} Extracted information.
 * @private
 */

/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @private
 */

/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * It is worth noting that we should not use `URL` as class name to prevent
 * clashes with the global URL instance that got introduced in browsers.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} [location] Location defaults for relative paths.
 * @param {Boolean|Function} [parser] Parser for the query string.
 * @private
 */

// The following if statements allows this module two have compatibility with

// 2 different API:

// 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments

//    where the boolean indicates that the query string should also be parsed.

// 2. The `URL` interface of the browser which accepts a URL, object as

//    arguments. The supplied object will be used as default values / fall-back

//    for relative paths.

// Extract protocol information before running the instructions.

// When the authority component is absent the URL starts with a path

// component.

// Hostname, host and protocol should be lowercased so they can be used to

// create a proper `origin`.

// Also parse the supplied query string in to an object. If we're supplied

// with a custom parser as function use that instead of the default build-in

// parser.

// If the URL is relative, resolve the pathname against the base URL.

// We should not add port numbers if they are already the default port number

// for a given protocol. As the host also contains the port number we're going

// override it with the hostname which contains no port number.

// Parse down the `auth` for the username and password.

// The href is just the compiled result.

/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL} URL instance for chaining.
 * @public
 */

/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String} Compiled version of the URL.
 * @public
 */

// Expose the URL parser and some additional properties that might be useful for

// others or testing.

/* 208 */

/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */

/* 209 */

/**
 * Decode a URI encoded string.
 *
 * @param {String} input The URI encoded string.
 * @returns {String|Null} The decoded string.
 * @api private
 */

/**
 * Attempts to encode a given input.
 *
 * @param {String} input The string that needs to be encoded.
 * @returns {String|Null} The encoded string.
 * @api private
 */

// Expose the module.

/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */

// Optionally prefix with a '?' if needed

// If we failed to encode the strings, we should bail out as we don't

// want to add invalid strings to the query.

// Edge cases where we actually want to encode the value to an empty

// string instead of the stringified value.

/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */

// Prevent overriding of existing properties. This ensures that build-in

// methods like `toString` or __proto__ are not overriden by malicious

// querystrings.

// In the case if failed decoding, we want to omit the key/value pairs

// from the result.

/* 210 */

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

/* 211 */

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

/* 212 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// The ._invoke method unifies the implementations of the .next,

// .throw, and .return methods.

// Be forgiving, per 25.3.3.3.3 of the spec:

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// Setting context._sent for legacy support of Babel's

// function.sent implementation.

// If an exception is thrown from innerFn, we leave state ===

// GenStateExecuting and loop back for another invocation.

// Dispatch the exception by looping back around to the

// context.dispatchException(context.arg) call above.

// Call delegate.iterator[context.method](context.arg) and handle the

// result, either by returning a { value, done } result from the

// delegate iterator, or by modifying context.method and context.arg,

// setting context.delegate to null, and returning the ContinueSentinel.

// Try/catch helper to minimize deoptimizations. Returns a completion

// record like context.tryEntries[i].completion. This interface could

// have been (and was previously) designed to take a closure to be

// invoked without arguments, but in all the cases we care about we

// already have an existing method we want to call, so there's no need

// to create a new function object. We can even get away with assuming

// the method takes exactly one argument, since that happens to be true

// in every case, so we don't have to touch the arguments object. The

// only additional allocation required is the completion record, which

// has a stable shape and so hopefully should be cheap to allocate.

// Dummy constructor functions that we use as the .constructor and

// .constructor.prototype properties for functions that return Generator

// objects. For full spec compliance, you may wish to configure your

// minifier not to mangle the names of these two functions.

// This is a polyfill for %IteratorPrototype% for environments that

// don't natively support it.

// This environment has a native %IteratorPrototype%; use it instead

// of the polyfill.

// Helper for defining the .next, .throw, and .return methods of the

// Iterator interface in terms of a single ._invoke method.

// Define the unified helper method that is used to implement .next,

// .throw, and .return (see defineIteratorMethods).

// When a yielded Promise is resolved, its final value becomes

// the .value of the Promise<{value,done}> result for the

// current iteration.

// If a rejected Promise was yielded, throw the rejection back

// into the async generator function so it can be handled there.

// If enqueue has been called before, then we want to wait until

// all previous Promises have been resolved before calling invoke,

// so that results are always delivered in the correct order. If

// enqueue has not been called before, then it is important to

// call invoke immediately, without waiting on a callback to fire,

// so that the async generator function has the opportunity to do

// any necessary setup in a predictable way. This predictability

// is why the Promise constructor synchronously invokes its

// executor callback, and why async functions synchronously

// execute code before the first await. Since we implement simple

// async functions in terms of async generators, it is especially

// important to get this right, even though it requires care.

// Avoid propagating failures to Promises returned by later

// invocations of the iterator.

// A .throw or .return when the delegate iterator has no .throw

// method always terminates the yield* loop.

// Note: ["return"] must be used for ES3 parsing compatibility.

// If the delegate iterator has a return method, give it a

// chance to clean up.

// If maybeInvokeDelegate(context) changed context.method from

// "return" to "throw", let that override the TypeError below.

// Assign the result of the finished delegate to the temporary

// variable specified by delegate.resultName (see delegateYield).

// Resume execution at the desired location (see delegateYield).

// If context.method was "throw" but the delegate handled the

// exception, let the outer generator proceed normally. If

// context.method was "next", forget context.arg since it has been

// "consumed" by the delegate iterator. If context.method was

// "return", allow the original .return call to continue in the

// outer generator.

// The delegate iterator is finished, so forget it and continue with

// the outer generator.

// Define Generator.prototype.{next,throw,return} in terms of the

// unified ._invoke helper method.

// The root entry object (effectively a try statement without a catch

// or a finally block) gives us a place to store values thrown from

// locations where there is no enclosing try statement.

// Return an iterator with no values.

// Regardless of whether this script is executing as a CommonJS module

// or not, return the runtime object so that we can declare the variable

// regeneratorRuntime in the outer scope, which allows this module to be

// injected easily by `bin/regenerator --include-runtime script.js`.

// For the native GeneratorFunction constructor, the best we can

// do is to check its .name property.

// Within the body of any async function, `await x` is transformed to

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// meant to be awaited.

// Note that simple async functions are implemented on top of

// AsyncIterator objects; they just return a Promise for the value of

// the final result produced by the iterator.

// A Generator should always return itself as the iterator object when the

// @@iterator function is called on it. Some browsers' implementations of the

// iterator prototype chain incorrectly implement this, causing the Generator

// object to not be returned from this call. This ensures that doesn't happen.

// See https://github.com/facebook/regenerator/issues/274 for more details.

// Rather than returning an object with a next method, we keep

// things simple and return the next function itself.

// To avoid creating an additional object, we just hang the .value

// and .done properties off the next function object itself. This

// also ensures that the minifier will not anonymize the function.

// Resetting context._sent for legacy support of Babel's

// Not sure about the optimal order of these conditions:

// If the dispatched exception was caught by a catch block,

// then let that catch block handle the exception normally.

// Exception thrown outside of any try block that could handle

// it, so set the completion value of the entire function to

// throw the exception.

// Ignore the finally entry if control is not jumping to a

// location outside the try/catch block.

// The context.catch method must only be called with a location

// argument that corresponds to a known catch block.

// Deliberately forget the last sent value so that we don't

// accidentally pass it on to the delegate.

// This module should not be running in strict mode, so the above

// assignment should always work unless something is misconfigured. Just

// in case runtime.js accidentally runs in strict mode, we can escape

// strict mode using a global Function call. This could conceivably fail

// if a Content Security Policy forbids using Function, but in that case

// the proper solution is to fix the accidental strict mode problem. If

// you've misconfigured your bundler to force strict mode and applied a

// CSP to forbid Function, and you're not willing to fix either of those

// problems, please detail your unique predicament in a GitHub issue.

/* 213 */

/* 214 */

/* 215 */

/* 216 */

/* 217 */

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */

// Check for circular references and return its corresponding clone.

// Recursively populate clone (susceptible to call stack limits).

/* 218 */

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */

/* 219 */

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/* 220 */

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/* 221 */

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/* 222 */

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */

/* 223 */

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */

/* 224 */

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/* 225 */

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/* 226 */

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/* 227 */

/** Used as the size to enable large array optimizations. */

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */

/* 228 */

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

/* 229 */

/** Used to detect methods masquerading as native. */

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */

/* 230 */

/** Used to detect overreaching core-js shims. */

/* 231 */

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

/* 232 */

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */

/* 233 */

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

// Add methods to `Hash`.

/* 234 */

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */

/* 235 */

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/* 236 */

/** Used to stand-in for `undefined` hash values. */

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/* 237 */

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/* 238 */

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */

/* 239 */

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/* 240 */

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */

/* 241 */

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/* 242 */

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/* 243 */

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */

/* 244 */

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */

/* 245 */

/* 246 */

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */

/* 247 */

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */

/* 248 */

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */

/* 249 */

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */

/* 250 */

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */

/* 251 */

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/* 252 */

/* 253 */

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */

/* 254 */

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/* 255 */

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/* 256 */

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */

/* 257 */

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */

/* 258 */

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */

/* 259 */

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */

/* 260 */

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */

/* 261 */

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

/* 262 */

/* 263 */

/* 264 */

/* 265 */

/* 266 */

/** Used to check objects for own properties. */

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */

// Add properties assigned by `RegExp#exec`.

/* 267 */

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */

/* 268 */

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */

/* 269 */

/** Used to match `RegExp` flags from their coerced string values. */

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */

/* 270 */

/** Used to convert symbols to primitives and strings. */

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */

/* 271 */

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */

/* 272 */

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */

/* 273 */

/* 274 */

/* 275 */

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */

/* 276 */

/* 277 */

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */

/* 278 */

/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */

/* 279 */

/**
 * Checks if `value` is `null`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
 * @example
 *
 * _.isNull(null);
 * // => true
 *
 * _.isNull(void 0);
 * // => false
 */

/* 280 */

/* 281 */

/*! https://mths.be/utf8js v2.0.0 by @mathias */

// Detect free variables `exports`

// Detect free variable `module`

// Taken from https://mths.be/punycode

// 1-byte sequence

// 2-byte sequence

// 3-byte sequence

// 4-byte sequence

// If we end up here, it’s not a continuation byte

// Read first byte

// 1-byte sequence (no continuation bytes)

// 3-byte sequence (may include unpaired surrogates)

// Some AMD build optimizers, like r.js, check for specific condition patterns

// like the following:

/* 282 */

/* 283 */

/**
 * Returns value of unit in Wei
 *
 * @method getValueOfUnit
 * @param {String} unit the unit to convert to, default ether
 * @returns {BigNumber} value of the unit (in Wei)
 * @throws error if the unit is not correct:w
 */

// Split it into a whole and fractional part

/* 284 */

/* 285 */

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */

/* 286 */

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */

// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.

// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.

/* 287 */

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */

/* 288 */

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */

/* 289 */

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/* 290 */

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */

// Add methods to `SetCache`.

/* 291 */

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */

/* 292 */

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */

/* 293 */

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */

/* 294 */

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/* 295 */

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

// Coerce booleans to `1` or `0` and dates to milliseconds.

// Invalid dates are coerced to `NaN`.

// Coerce regexes to strings and treat strings, primitives and objects,

// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring

// for more details.

// Recursively compare objects (susceptible to call stack limits).

/* 296 */

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */

/* 297 */

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */

/* 298 */

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

// Non `Object` object instances with different constructors are not equal.

/* 299 */

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */

/* 300 */

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

/* 301 */

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */

/* 302 */

/* . */

/* 303 */

/** Used as the maximum memoize cache size. */

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */

/* 304 */

/** Error message constants. */

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */

// Expose `MapCache`.

/* 305 */

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */

/* 306 */

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

// Exit early for strings to avoid a performance hit in some environments.

// Recursively convert values (susceptible to call stack limits).

/* 307 */

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */

/* 308 */

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */

/* 309 */

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */

/* 310 */

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */

/* 311 */

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */

/* 312 */

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

/* 313 */

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

/* 314 */

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

/* 315 */

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */

/* 316 */

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */

/* 317 */

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */

/* 318 */

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */

/* 319 */

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */

/* 320 */

/* 321 */

/* 322 */

/* 323 */

// the least I can do is make error messages for the rest of the node.js/crypto api.

// ;[

//   'createCredentials'

// ].forEach(function (name) {

//   exports[name] = function () {

//     throw new Error([

//       'sorry, ' + name + ' is not implemented yet',

//       'we accept pull requests',

//       'https://github.com/crypto-browserify/crypto-browserify'

//     ].join('\n'))

//   }

// })

/* 324 */

/* 325 */

/* 326 */

/* 327 */

/* 328 */

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

/* 329 */

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

/* 330 */

/* 331 */

/* 332 */

/* 333 */

/* 334 */

/* 335 */

/* 336 */

// 7, 15, 23, 31, 39, 47, 55, 63

// 6, 14, 22, 30, 39, 47, 55, 63

// 5, 13, 21, 29, 39, 47, 55, 63

// 4, 12, 20, 28

// 1, 9, 17, 25, 33, 41, 49, 57

// 2, 10, 18, 26, 34, 42, 50, 58

// 3, 11, 19, 27, 35, 43, 51, 59

// 36, 44, 52, 60

// inL => outL

// inR => outR

/* 337 */

// Might be overrided

// Append data to buffer

// Shift next

// Write blocks

// Queue rest

// TODO(indutny): optimize it, this is far from optimal

// Buffer rest of the input

/* 338 */

// Initial Permutation

// Apply f() x16 times

// f(r, k)

// Reverse Initial Permutation

/* 339 */

/* 340 */

/* 341 */

/* 342 */

/* 343 */

/* 344 */

/* 345 */

/* 346 */

/* 347 */

/* 348 */

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html

// by Juho Vähä-Herttua

// V_i+1 = V_i >> 1

// Z_i+1 = Z_i ^ V_i

// Store the value of LSB(V_i)

// If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R

/* 349 */

/* 350 */

/* 351 */

/* 352 */

/* 353 */

/* 354 */

//not a prime so +1

// we'd be able to check the generator

// it would fail so +8

//not a safe prime

// unsuidable generator

// prime mod 10 needs to equal 3 or 7

/* 355 */

/* 356 */

// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js

// rsa keys can be interpreted as ecdsa ones in openssl

// Pad values

/* 357 */

/* 358 */

// Represent num in a w-NAF form

// Optimization, shift by word if possible

// Represent k1, k2 in a Joint Sparse Form

// First phase

// Second phase

/* 359 */

// Use Montgomery, when there is no fast reduction for the prime

// Useful for many curves

// Curve configuration, optional

// Temporary arrays

// Generalized Greg Maxwell's trick

// Translate into more windowed form

// Precompute window

// Get NAF form

// Count zeroes

// J +- P

// J +- J

// Comb small window NAFs

// Try to avoid Projective points, if possible

/* -1 -1 */

/* -1 0 */

/* -1 1 */

/* 0 -1 */

/* 0 0 */

/* 0 1 */

/* 1 -1 */

/* 1 0 */

/* 1 1 */

// Zeroify references

// uncompressed, hybrid-odd, hybrid-even

/* 360 */

// If the curve is endomorphic, precalculate beta and lambda

// Force redgomery representation when loading from JSON

// No efficient endomorphism

// Compute beta and lambda, that lambda * P = (beta * Px; Py)

// Choose the smallest beta

// Choose the lambda that is matching selected beta

// Get basis vectors, used for balanced length-two representation

// Find roots of for x^2 + x + 1 in F

// Root = (-1 +- Sqrt(-3)) / 2

// aprxSqrt >= sqrt(this.n)

// 3.74

// Run EGCD, until r(L + 1) < aprxSqrt

// Normalize signs

// XXX Is there any way to tell if the number is odd without converting it

// to non-red form?

// Clean-up references to points and coefficients

// O + P = P

// P + O = P

// P + P = 2P

// P + (-P) = O

// P + Q = O

// 2P = O

// 12M + 4S + 7A

// 8M + 3S + 7A

// 1M + 2S + 1A + N * (4S + 5M + 8A)

// N = 1 => 6M + 6S + 9A

// Z = 1

// hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html

//     #doubling-mdbl-2007-bl

// 1M + 5S + 14A

// XX = X1^2

// YY = Y1^2

// M = 3 * XX + a; a = 0

// T = M ^ 2 - 2*S

// X3 = T

// Y3 = M * (S - T) - 8 * YYYY

// Z3 = 2*Y1

//     #doubling-dbl-2009-l

// 2M + 5S + 13A

// A = X1^2

// B = Y1^2

// E = 3 * A

// F = E^2

// X3 = F - 2 * D

// Y3 = E * (D - X3) - 8 * C

// Z3 = 2 * Y1 * Z1

// hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html

// 1M + 5S + 15A

// M = 3 * XX + a

// T = M^2 - 2 * S

// Z3 = 2 * Y1

// hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b

// 3M + 5S

// delta = Z1^2

// gamma = Y1^2

// X3 = alpha^2 - 8 * beta

// Z3 = (Y1 + Z1)^2 - gamma - delta

// Y3 = alpha * (4 * beta - X3) - 8 * gamma^2

// 4M + 6S + 10A

// hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl

// 5M + 10S + ...

// U = (M + E)^2 - MM - EE - T

// X3 = 4 * (X1 * EE - 4 * YY * U)

// Y3 = 8 * Y1 * (U * (T - U) - E * EE)

// Z3 = (Z1 + E)^2 - ZZ - EE

// x1 * z2^2 == x2 * z1^2

// y1 * z2^3 == y2 * z1^3

// XXX This code assumes that zero is always zero in red

/* 361 */

// No-op

// http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3

// 2M + 2S + 4A

// A = X1 + Z1

// AA = A^2

// http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3

// 4M + 2S + 6A

// A = X2 + Z2

// B = X2 - Z2

// Q

// N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q

// N * Q = 2 * ((N / 2) * Q + Q))

// N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)

// N * Q + Q = 2 * ((N / 2) * Q + Q)

// Normalize coordinates

/* 362 */

// NOTE: Important as we are creating point in Base.call()

// Use extended coordinates

// Just for compatibility with Short curve

// x^2 = (y^2 - c^2) / (c^2 d y^2 - a)

// Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)

// hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html

//     #doubling-dbl-2008-hwcd

// 4M + 4S

// D = a * A

// E = (X1 + Y1)^2 - A - B

// hyperelliptic.org/EFD/g1p/auto-twisted-projective.html

//     #doubling-dbl-2008-bbjlp

//     #doubling-dbl-2007-bl

// and others

// Generally 3M + 4S or 2M + 4S

// B = (X1 + Y1)^2

// C = X1^2

// E = a * C

// F = E + D

// X3 = (B - C - D) * (F - 2)

// Y3 = F * (E - D)

// Z3 = F^2 - 2 * F

// H = Z1^2

// J = F - 2 * H

// X3 = (B-C-D)*J

// Z3 = F * J

// E = C + D

// H = (c * Z1)^2

// X3 = c * (B - E) * J

// Y3 = c * E * (C - D)

// Z3 = E * J

// Double in extended coordinates

//     #addition-add-2008-hwcd-3

// 8M

// A = (Y1 - X1) * (Y2 - X2)

// B = (Y1 + X1) * (Y2 + X2)

//     #addition-add-2008-bbjlp

//     #addition-add-2007-bl

// 10M + 1S

// A = Z1 * Z2

// B = A^2

// Y3 = A * G * (D - a * C)

// Z3 = F * G

// Y3 = A * G * (D - C)

// Z3 = c * F * G

// Compatibility with BaseCurve

/* 363 */

// -121665 * (121666^(-1)) (mod P)

// 4/5

// Precomputed endomorphism

/* 364 */

/* 365 */

/* 366 */

// Just truncate output

/* 367 */

/* 368 */

/* 369 */

// Shorten key, if needed

// Add padding to key

// 0x36 ^ 0x5c = 0x6a

/* 370 */

/* 371 */

// Shortcut `elliptic.ec(curve-name)`

// Shortcut for `elliptic.ec(elliptic.curves.curveName)`

// Point on curve

// Hash for function for DRBG

// Instantiate Hmac_DRBG

// Zero-extend key to provide enough entropy

// Use complement of `s`, if it is > `n / 2`

// Perform primitive values validation

// Validate signature

// NOTE: Greg Maxwell's trick, inspired by:

// https://git.io/vad3K

// 1.1. Let x = r + jn.

// 1.6.1 Compute Q = r^-1 (sR -  eG)

//               Q = r^-1 (sR + -eG)

/* 372 */

// Optional entropy enc

// Optional encoding

// Optional additional data

/* 373 */

// KeyPair(ec, { priv: ..., pub: ... })

// compact is optional argument

// Ensure that the priv won't be bigger than n, otherwise we may fail

// in fixed multiplication method

// Montgomery points only have an `x` coordinate.

// Weierstrass/Edwards points on the other hand have both `x` and

// `y` coordinates.

// ECDH

// ECDSA

/* 374 */

/* 375 */

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/

/* 376 */

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/

/* 377 */

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/

/* 378 */

// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js

// Fedor, you are amazing.

/* 379 */

// Lazily create decoder

// Lazily create encoder

/* internal */

/* 380 */

// win.eval() magically appears when this is called in IE:

// Avoid copying circular objects like `top` and `window` by only

// updating existing context properties or new properties in the `win`

// that was only introduced after the eval.

// maybe...

/* 381 */

/* 382 */

// IE only adds stack when thrown

/* 383 */

// State

// Should create new instance on each method

// Filter children

// Filter children and args

// Replace parent to maintain backward link

// Overrided methods

// Public methods

// Decoding

// Decode root node

// Check if tag is there

// Trial and Error

// Push object on stack

// Unwrap explicit values

// Unwrap implicit and normal values

// Select proper method for tag

// Decode children

// Decode contained/encoded by schema, only in bit or octet strings

// NOTE: We are ignoring errors here, to let parser continue with other

// parts of encoded data

// Pop object

// Set key

// Create altered use decoder if implicit is set

// Encoding

// Set reporter to share it with a child class

// Check if data is there

// Encode children first

// Anything that was given is translated to buffer

// TODO(indutny): this should be thrown on DSL level

// Encode data itself

// Wrap in explicit

/* 384 */

/* 385 */

/* 386 */

// Remove excessive symbols

/* 387 */

/* 388 */

/* 389 */

// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js

// thanks to @Rantanen

/* 390 */

/* 391 */

// adapted from https://github.com/apatil/pemstrip

/* 392 */

/* 393 */

// eslint-disable-line new-cap

/* 394 */

/* 395 */

/* 396 */

/* 397 */

// eslint-disable-line no-self-compare

/* 398 */

/* 399 */

/* 400 */

/* 401 */

// N = Cpu cost, r = Memory cost, p = parallelization cost

// send progress notifications once every 1,000 ops

// all of these functions are actually moved to the top

// due to function hoisting

// naive approach... going back to loop unrolling may yield additional performance

/* 402 */

/* 403 */

// See https://github.com/broofa/node-uuid for API details

// node and clockseq need to be initialized to random values if they're not

// specified.  We do this lazily to minimize issues related to insufficient

// system entropy.  See #189

// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)

// Per 4.2.2, randomize (14 bit) clockseq

// UUID timestamps are 100 nano-second units since the Gregorian epoch,

// (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so

// time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'

// (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.

// Per 4.2.1.2, use count of uuid's generated during the current clock

// cycle to simulate higher resolution clock

// Per 4.2.1.2 Throw error if too many uuids are requested

// Per 4.2.1.2, Bump clockseq on clock regression

// Reset nsecs if clock regresses (new clockseq) or we've moved onto a new

// time interval

// `time_low`

// Per 4.1.4 - Convert from unix epoch to Gregorian epoch

// `time_mid`

// `time_high_and_version`

// include version

// `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

// `clock_seq_low`

// `node`

/* 404 */

// Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

// Copy bytes to buffer, if provided

/* 405 */

/* 406 */

// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI

///////////////////////////////////

// Parsing for Solidity Signatures

// These need to be transformed to their full description

// Hit a space...

// If reading type, the type is done and may read a param or name

// If reading name, the name is done

// @TODO: Better return type

// @TODO: Allow a second boolean to expose names

// @TODO: Allow a second boolean to expose names and modifiers

// Make sure the "returns" is surrounded by a space and all whitespace is exactly one space

// We have outputs

// Clones the functionality of an existing Coder, but without a localName

//uint256Coder.encode(dynamicOffset).copy(data, offset);

//part.value.copy(data, dynamicOffset);  @TODO

//part.value.copy(data, offset);  @TODO

// The dynamic part is leap-frogged somewhere else; doesn't count towards size

// @TODO:

//if (data.length < offset + length * 32) { throw new Error('invalid array'); }

/*
function getTypes(coders) {
    var type = coderTuple(coders).type;
    return type.substring(6, type.length - 1);
}
*/

// @TODO: Is there a way to return "class"?

// Convert types to type objects

//   - "uint foo" => { type: "uint", name: "foo" }

//   - "tuple(uint, uint)" => { type: "tuple", components: [ { type: "uint" }, { type: "uint" }, ] }

// See encode for details

/* 407 */

/* 408 */

// We use this for base 36 maths

// Shims for environments that are missing some required constants and functions

// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number

// Create lookup table

// How many decimal digits can we process? (for 64-bit float, this is 15)

// Javascript can handle integers safely up to 15 (decimal) digits

// Missing the 0x prefix

// It is a checksummed address with a bad checksum

// It is an ICAP address with a bad checksum

// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed

/* 409 */

/* 410 */

//See: https://github.com/ethereum/wiki/wiki/RLP

// returns { consumed: number, result: Object }

// Array with extra length prefix

/* 411 */

// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array

// Surrogate Pair

// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499

// Invalid bytes are ignored

// 0xxx xxxx

// Multibyte; how many bytes left for this character?

// 110x xxxx 10xx xxxx

// Do we have enough bytes in our data?

// If there is an invalid unprocessed byte, skip continuation bytes

// Remove the length prefix from the char

// Invalid continuation byte

// Check for overlong seuences (more bytes than needed)

// Maximum code point

// Reserved for UTF-16 surrogate halves

// Get the bytes

// Check we have room for null-termination

// Zero-pad (implicitly null-terminates)

// Must be 32 bytes with a null-termination

// Find the null termination

// Determine the string value

/* 412 */

/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */

/* 413 */

// Reject empty names:

/* 414 */

/* istanbul ignore if */

// Step 3. Break

// Step 4. Convert/Validate

// 2. The label must not contain a U+002D HYPHEN-MINUS character in both the

// third position and fourth positions.

// 3. The label must neither begin nor end with a U+002D HYPHEN-MINUS

// 4. The label must not contain a U+002E ( . ) FULL STOP.

// this should nerver happen as label is chunked internally by this character

// 5. The label must not begin with a combining mark, that is:

// General_Category=Mark.

//for .. of replacement

/* 415 */

/* This file is generated from the Unicode IDNA table, using
   the build-unicode-tables.py script. Please edit that
   script instead of this file. */

// High planes are special cased.

/* 416 */

// Define Properties

/**
     * Returns the rlp encoding of the transaction
     * @method serialize
     * @return {Buffer}
     * @memberof Transaction
     * @name serialize
     */

// attached serialize

/**
     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.
     * @name from
     * @memberof Transaction
     */

// calculate chainId from signature

// set chainId

/**
   * If the tx's `to` is to the creation address
   * @return {Boolean}
   */

/**
   * Computes a sha3-256 hash of the serialized tx
   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature
   * @return {Buffer}
   */

// EIP155 spec:

// when computing the hash of a transaction for purposes of signing or recovering,

// instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),

// hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0

// create hash

/**
   * returns the public key of the sender
   * @return {Buffer}
   */

/**
   * returns the sender's address
   * @return {Buffer}
   */

/**
   * Determines if the signature is valid
   * @return {Boolean}
   */

// All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.

/**
   * sign a transaction with a given a private key
   * @param {Buffer} privateKey
   */

/**
   * The amount of gas paid for the data in this tx
   * @return {BN}
   */

/**
   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
   * @return {BN}
   */

/**
   * the up front amount that an account must have for this transaction to be valid
   * @return {BN}
   */

/**
   * validates the signature and checks to see if it has enough gas
   * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean
   * @return {Boolean|String}
   */

/* 417 */

/**
 * the max integer that this VM can handle (a ```BN```)
 * @var {BN} MAX_INTEGER
 */

/**
 * 2^256 (a ```BN```)
 * @var {BN} TWO_POW256
 */

/**
 * Keccak-256 hash of null (a ```String```)
 * @var {String} KECCAK256_NULL_S
 */

/**
 * Keccak-256 hash of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_NULL
 */

/**
 * Keccak-256 of an RLP of an empty array (a ```String```)
 * @var {String} KECCAK256_RLP_ARRAY_S
 */

/**
 * Keccak-256 of an RLP of an empty array (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP_ARRAY
 */

/**
 * Keccak-256 hash of the RLP of null  (a ```String```)
 * @var {String} KECCAK256_RLP_S
 */

/**
 * Keccak-256 hash of the RLP of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP
 */

/**
 * [`BN`](https://github.com/indutny/bn.js)
 * @var {Function}
 */

/**
 * [`rlp`](https://github.com/ethereumjs/rlp)
 * @var {Function}
 */

/**
 * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
 * @var {Object}
 */

/**
 * Returns a buffer filled with 0s
 * @method zeros
 * @param {Number} bytes  the number of bytes the buffer should be
 * @return {Buffer}
 */

/**
  * Returns a zero address
  * @method zeroAddress
  * @return {String}
  */

/**
 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @method lsetLength
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @param {Boolean} [right=false] whether to start padding form the left or right
 * @return {Buffer|Array}
 */

/**
 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @return {Buffer|Array}
 */

/**
 * Trims leading zeros from a `Buffer` or an `Array`
 * @param {Buffer|Array|String} a
 * @return {Buffer|Array|String}
 */

/**
 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
 * @param {*} v the value
 */

// converts a BN to a Buffer

/**
 * Converts a `Buffer` to a `Number`
 * @param {Buffer} buf
 * @return {Number}
 * @throws If the input number exceeds 53 bits.
 */

/**
 * Converts a `Buffer` into a hex `String`
 * @param {Buffer} buf
 * @return {String}
 */

/**
 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
 * @param {Buffer} num
 * @return {BN}
 */

/**
 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
 * @param {BN} num
 * @return {Buffer}
 */

/**
 * Creates Keccak hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the Keccak width
 * @return {Buffer}
 */

/**
 * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */

/**
 * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the SHA-3 width
 * @return {Buffer}
 */

/**
 * Creates SHA256 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */

/**
 * Creates RIPEMD160 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Boolean} padded whether it should be padded to 256 bits or not
 * @return {Buffer}
 */

/**
 * Creates SHA-3 hash of the RLP encoded version of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */

/**
 * Checks if the private key satisfies the rules of the curve secp256k1.
 * @param {Buffer} privateKey
 * @return {Boolean}
 */

/**
 * Checks if the public key satisfies the rules of the curve secp256k1
 * and the requirements of Ethereum.
 * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Boolean}
 */

/**
 * Returns the ethereum address of a given public key.
 * Accepts "Ethereum public keys" and SEC1 encoded keys.
 * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Buffer}
 */

// Only take the lower 160bits of the hash

/**
 * Returns the ethereum public key of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */

// skip the type flag and use the X, Y points

/**
 * Converts a public key to the Ethereum format.
 * @param {Buffer} publicKey
 * @return {Buffer}
 */

/**
 * ECDSA sign
 * @param {Buffer} msgHash
 * @param {Buffer} privateKey
 * @return {Object}
 */

/**
 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
 * used to produce the signature.
 * @param message
 * @returns {Buffer} hash
 */

/**
 * ECDSA public key recovery from signature
 * @param {Buffer} msgHash
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {Buffer} publicKey
 */

/**
 * Convert signature parameters into the format of `eth_sign` RPC method
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {String} sig
 */

// NOTE: with potential introduction of chainId this might need to be updated

// geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin

// FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053

/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
 * @param {String} sig
 * @return {Object}
 */

// support both versions of `eth_sign` responses

/**
 * Returns the ethereum address of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */

/**
 * Checks if the address is a valid. Accepts checksummed addresses too
 * @param {String} address
 * @return {Boolean}
 */

/**
  * Checks if a given address is a zero address
  * @method isZeroAddress
  * @param {String} address
  * @return {Boolean}
  */

/**
 * Returns a checksummed address
 * @param {String} address
 * @return {String}
 */

/**
 * Checks if the address is a valid checksummed address
 * @param {Buffer} address
 * @return {Boolean}
 */

/**
 * Generates an address of a newly created contract
 * @param {Buffer} from the address which is creating this new address
 * @param {Buffer} nonce the nonce of the from account
 * @return {Buffer}
 */

// in RLP we want to encode null in the case of zero nonce

// read the RLP documentation for an answer if you dare

/**
 * Returns true if the supplied address belongs to a precompiled account (Byzantium)
 * @param {Buffer|String} address
 * @return {Boolean}
 */

/**
 * Adds "0x" to a given `String` if it does not already start with "0x"
 * @param {String} str
 * @return {String}
 */

/**
 * Validate ECDSA signature
 * @method isValidSignature
 * @param {Buffer} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @param {Boolean} [homestead=true]
 * @return {Boolean}
 */

/**
 * Converts a `Buffer` or `Array` to JSON
 * @param {Buffer|Array} ba
 * @return {Array|String|null}
 */

/**
 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
 * @param {Object} self the `Object` to define properties on
 * @param {Array} fields an array fields to define. Fields can contain:
 * * `name` - the name of the properties
 * * `length` - the number of bytes the field can have
 * * `allowLess` - if the field can be less than the length
 * * `allowEmpty`
 * @param {*} data data to be validated against the definitions
 */

// if the constuctor is passed data

// attach the `toJSON`

// attach alias

// make sure all the items are buffers

/* 418 */

/* 419 */

/* 420 */

// remove result from memory

// because sometimes we need hash right now and little later

/* 421 */

/* 422 */

// much faster than `new Array(50)`

/* 423 */

// theta

// chi

// iota

/* 424 */

/* 425 */

/* 426 */

// TypeError

// RangeError

/* 427 */

// begin

// private key

// middle

// public key

// sequence header

// sequence length constructor

// sequence length

// sequence element 0: version number (=1)

// sequence tag byte

// sequence length byte

// sequence tag byte for r

// length for r

// sequence tag byte for s

// length for s

// ignore leading zeros in r

// copy r value

// ignore leading zeros in s

// copy s value

/* 428 */

// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki

// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]

// NOTE: SIGHASH byte ignored AND restricted, truncate before use

// non-BIP66 - extract R, S values

/*
 * Expects r and s to be positive DER integers.
 *
 * The DER format uses the most significant bit as a sign bit (& 0x80).
 * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
 *
 * Examples:
 *
 *      0 =>     0x00
 *      1 =>     0x01
 *     -1 =>     0xff
 *    127 =>     0x7f
 *   -127 =>     0x81
 *    128 =>   0x0080
 *   -128 =>     0x80
 *    255 =>   0x00ff
 *   -255 =>   0xff01
 *  16300 =>   0x3fac
 * -16300 =>   0xc054
 *  62300 => 0x00f35c
 * -62300 => 0xff0ca4
*/

// 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]

/* 429 */

// overflow

// compute corresponding Y

// is odd flag

// x*x*x + b = y*y

/* 430 */

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js

// original notice:

// based on node assert, original notice:

// NB: The URL to the CommonJS spec is kept just for tradition.

//     node-assert has evolved a lot since then, both in API and behavior.

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0

// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!

// Originally from narwhal.js (http://narwhaljs.org)

// Copyright (c) 2009 Thomas Robinson <280north.com>

// Permission is hereby granted, free of charge, to any person obtaining a copy

// of this software and associated documentation files (the 'Software'), to

// deal in the Software without restriction, including without limitation the

// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or

// sell copies of the Software, and to permit persons to whom the Software is

// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in

// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR

// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,

// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE

// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN

// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION

// 1. The assert module provides functions that throw

// AssertionError's when particular conditions are not met. The

// assert module must conform to the following interface.

// 2. The AssertionError is defined in assert.

// new assert.AssertionError({ message: message,

//                             actual: actual,

//                             expected: expected })

// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js

// At present only the three keys mentioned above are used and

// understood by the spec. Implementations or sub modules can pass

// other keys to the AssertionError's constructor - they will be

// ignored.

// 3. All of the following functions must throw an AssertionError

// when a corresponding condition is not met, with a message that

// may be undefined if not provided.  All assertion methods provide

// both the actual and expected values to the assertion error for

// display purposes.

// EXTENSION! allows for well behaved errors defined elsewhere.

// 4. Pure assertion tests whether a value is truthy, as determined

// by !!guard.

// assert.ok(guard, message_opt);

// This statement is equivalent to assert.equal(true, !!guard,

// message_opt);. To test strictly for the value true, use

// assert.strictEqual(true, guard, message_opt);.

// 7.1. All identical values are equivalent, as determined by ===.

// 7.2. If the expected value is a Date object, the actual value is

// equivalent if it is also a Date object that refers to the same time.

// 7.3 If the expected value is a RegExp object, the actual value is

// equivalent if it is also a RegExp object with the same source and

// properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).

// 7.4. Other pairs that do not both pass typeof value == 'object',

// equivalence is determined by ==.

// 7.5 For all other Object pairs, including Array objects, equivalence is

// determined by having the same number of owned properties (as verified

// with Object.prototype.hasOwnProperty.call), the same set of keys

// (although not necessarily the same order), equivalent values for every

// corresponding key, and an identical 'prototype' property. Note: this

// accounts for both named and indexed properties on Arrays.

// if one is a primitive, the other must be same

// having the same number of owned properties (keys incorporates

// hasOwnProperty)

//the same set of keys (although not necessarily the same order),

//~~~cheap key test

//equivalent values for every corresponding key, and

//~~~possibly expensive deep test

// 8. The non-equivalence assertion tests for any deep inequality.

// assert.notDeepEqual(actual, expected, message_opt);

// If both values are instances of typed arrays, wrap their underlying

// ArrayBuffers in a Buffer each to increase performance

// This optimization requires the arrays to have the same type as checked by

// Object.prototype.toString (aka pToString). Never perform binary

// comparisons for Float*Arrays, though, since e.g. +0 === -0 but their

// bit patterns are not identical.

// Ignore.  The instanceof check doesn't work for arrow functions.

// 11. Expected to throw an error:

// assert.throws(block, Error_opt, message_opt);

// non v8 browsers so we can have a stacktrace

// try to strip useless frames

// once we have located the function frame

// we need to strip out everything before it (and its line)

// assert.AssertionError instanceof Error

// 5. The equality assertion tests shallow, coercive equality with

// ==.

// assert.equal(actual, expected, message_opt);

// 6. The non-equality assertion tests for whether two objects are not equal

// with != assert.notEqual(actual, expected, message_opt);

// 7. The equivalence assertion tests a deep equality relation.

// assert.deepEqual(actual, expected, message_opt);

// 9. The strict equality assertion tests strict equality, as determined by ===.

// assert.strictEqual(actual, expected, message_opt);

// 10. The strict non-equality assertion tests for strict inequality, as

// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

/*optional*/

// EXTENSION! This is annoying to write outside this module.

// Expose a strict only variant of assert

/* 431 */

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

// Detect buggy property enumeration order in older V8 versions.

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// eslint-disable-line no-new-wrappers

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// We don't expect any of the above to throw, but better to be safe.

/* 432 */

// Mark that a method should not be used.

// Returns a modified function which warns once by default.

// If --no-deprecation is set, then it is a no-op.

// Allow for deprecating things in the process of starting up.

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */

/* legacy: obj, showHidden, depth, colors*/

// default options

// legacy...

// got an "options" object

// set default options

// Provide a hook for user-specified inspect functions.

// Check that value is an object with an inspect function on it

// Filter out the util module, it's inspect function is special

// Primitive types cannot have properties

// For some reason typeof null is "object", so special case here.

// Look up the keys of the object.

// IE doesn't make error fields non-enumerable

// http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx

// Some type of object without properties can be shortcutted.

// Make Array say that they are Array

// Make functions say that they are functions

// Make RegExps say that they are RegExps

// Make dates with properties first say the date

// Make error with message first say the error

// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

// Don't use 'blue' not visible on cmd.exe

// "name": intentionally not styling

// 26 Feb 16:19:34

// log is just a thin wrapper to console.log that prepends a timestamp

/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */

// Don't do anything if add isn't an object

// `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).

// Because `null` is a special error value in callbacks which means "no error

// occurred", we error-wrap so the callback consumer can distinguish between

// "the promise rejected with null" or "the promise fulfilled with undefined".

// We DO NOT return the promise as it gives the user a false sense that

// the promise is actually somehow related to the callback's execution

// and that the callback throwing will reject the promise.

// In true node style we process the callback on `nextTick` with all the

// implications (stack, `uncaughtException`, `async_hooks`)

/* 433 */

/* 434 */

/**
 * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
 * This function takes in a data, convert it to buffer if not, and a length for recursion
 * @param input - will be converted to buffer
 * @returns returns buffer of encoded data
 **/

/**
 * Parse integers. Check if there is no leading zeros
 * @param v The value to parse
 * @param base The base to parse the integer into
 */

/** Check if a string is prefixed by 0x */

/** Removes 0x from a given String */

/** Transform an integer into its hexadecimal value */

/** Pad a string to be even */

/** Transform anything into a Buffer */

/** Transform an integer into a Buffer */

//# sourceMappingURL=index.js.map

/** Decode an input with RLP */

// a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.

// string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string

// The range of the first byte is [0x80, 0xb7]

// set 0x80 null to 0

// a list between  0-55 bytes long

// a list  over 55 bytes long

/**
 * Get the length of the RLP input
 * @param input
 * @returns The length of the input or an empty Buffer if no input
 */

/* 435 */

/**
 * Pads a `String` to have an even length
 * @param {String} value
 * @return {String} output
 */

/**
 * Converts a `Number` into a hex `String`
 * @param {Number} i
 * @return {String}
 */

/**
 * Converts an `Number` to a `Buffer`
 * @param {Number} i
 * @return {Buffer}
 */

/**
 * Returns TRUE if the first specified array contains all elements
 * from the second one. FALSE otherwise.
 *
 * @param {array} superset
 * @param {array} subset
 *
 * @returns {boolean}
 */

/**
 * Should be called to get utf8 from it's hex representation
 *
 * @method toUtf8
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */

/**
 * Get the binary size of a string
 * @param {String} str
 * @return {Number}
 */

/**
 * Should be called to get hex representation (prefixed by 0x) of ascii string
 *
 * @method fromAscii
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */

/**
 * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
 *
 * @method getKeys get specific key from inner object array of objects
 * @param {String} params
 * @param {String} key
 * @param {Boolean} allowEmpty
 * @returns {Array} output just a simple array of output keys
 */

/**
 * Should be called to get hex representation (prefixed by 0x) of utf8 string
 *
 * @method fromUtf8
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */

/**
 * Should be called to get ascii from it's hex representation
 *
 * @method toAscii
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */

/**
 * Is the string a hex string.
 *
 * @method check if string is hex string of specific length
 * @param {String} value
 * @param {Number} length
 * @returns {Boolean} output the string is a hex string
 */

/* 436 */

/* 437 */

/* 438 */

/* 439 */

// imports

// module

/* 440 */

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

// css base code, injected by the css-loader

// return the list of modules as css string

// Adapted from convert-source-map (MIT)

// import a list of modules into the list

// skip already imported module

// this implementation is not 100% perfect for weird media query combinations

//  when a module is imported multiple times with different media queries.

//  I hope this will never occur (Hey this way we have smaller bundles)

/* 441 */

// Test for IE <= 9 as proposed by Browserhacks

// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805

// Tests for existence of standard globals is to allow style-loader

// to operate correctly into non-standard environments

// @see https://github.com/webpack-contrib/style-loader/issues/177

// If passing function in options, then use it for resolve "head" element.

// Useful for Shadow Root style i.e

// {

//   insertInto: function () { return document.querySelector("#foo").shadowRoot }

// }

// Special case to return head of iframe instead of iframe itself

// This will throw an exception if access to iframe is blocked

// due to cross-origin restrictions

// If a transform function was defined, run it on the css

// If the transform function returns a falsy value, don't add this css.

// This allows conditional loading of css

// noop

// If transform returns a value, use that instead of the original css.

// This allows running runtime transformations on the css.

// http://stackoverflow.com/a/26603875

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>

// tags it will allow on a page

// By default, add <style> tags to the <head> element

// By default, add <style> tags to the bottom of the target

/* 442 */

/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

// get current location

// blank or null?

// send back the fixed css

// strip quotes (if they exist)

// already a full url? no change

//TODO: should we add protocol?

// convert the url to a full url

/* 443 */

// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isFunction.js

/** PURE_IMPORTS_START  PURE_IMPORTS_END */

//# sourceMappingURL=isFunction.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/config.js

/*@__PURE__*/

//# sourceMappingURL=config.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/hostReportError.js

//# sourceMappingURL=hostReportError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Observer.js

/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */

//# sourceMappingURL=Observer.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isArray.js

//# sourceMappingURL=isArray.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isObject.js

//# sourceMappingURL=isObject.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js

//# sourceMappingURL=UnsubscriptionError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Subscription.js

/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */

//# sourceMappingURL=Subscription.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js

//# sourceMappingURL=Subscriber.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/canReportError.js

/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */

//# sourceMappingURL=canReportError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/toSubscriber.js

/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */

//# sourceMappingURL=toSubscriber.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/symbol/observable.js

//# sourceMappingURL=observable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/noop.js

//# sourceMappingURL=noop.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/pipe.js

/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */

//# sourceMappingURL=pipe.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Observable.js

/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */

//# sourceMappingURL=Observable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js

//# sourceMappingURL=ObjectUnsubscribedError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/SubjectSubscription.js

/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */

//# sourceMappingURL=empty.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isScheduler.js

//# sourceMappingURL=isScheduler.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeToArray.js

//# sourceMappingURL=subscribeToArray.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduled/scheduleArray.js

/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */

//# sourceMappingURL=scheduleArray.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/fromArray.js

/** PURE_IMPORTS_START _Observable,_util_subscribeToArray,_scheduled_scheduleArray PURE_IMPORTS_END */

//# sourceMappingURL=fromArray.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/of.js

/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_scheduled_scheduleArray PURE_IMPORTS_END */

//# sourceMappingURL=of.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/throwError.js

/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */

//# sourceMappingURL=throwError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/Notification.js

/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */

//# sourceMappingURL=Notification.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/observeOn.js

/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */

//# sourceMappingURL=Immediate.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js

/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */

//# sourceMappingURL=VirtualTimeScheduler.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/identity.js

//# sourceMappingURL=identity.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isObservable.js

//# sourceMappingURL=isObservable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js

//# sourceMappingURL=ArgumentOutOfRangeError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/EmptyError.js

//# sourceMappingURL=EmptyError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/TimeoutError.js

//# sourceMappingURL=TimeoutError.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/map.js

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

//# sourceMappingURL=map.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/bindCallback.js

/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isArray,_util_isScheduler PURE_IMPORTS_END */

//# sourceMappingURL=bindCallback.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/bindNodeCallback.js

/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_canReportError,_util_isScheduler,_util_isArray PURE_IMPORTS_END */

//# sourceMappingURL=bindNodeCallback.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/OuterSubscriber.js

//# sourceMappingURL=OuterSubscriber.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/InnerSubscriber.js

//# sourceMappingURL=subscribeToPromise.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/symbol/iterator.js

//# sourceMappingURL=isArrayLike.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isPromise.js

//# sourceMappingURL=isPromise.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeTo.js

/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */

//# sourceMappingURL=subscribeTo.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/subscribeToResult.js

/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo,_Observable PURE_IMPORTS_END */

//# sourceMappingURL=subscribeToResult.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/combineLatest.js

/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */

//# sourceMappingURL=isIterable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduled/scheduled.js

/** PURE_IMPORTS_START _scheduleObservable,_schedulePromise,_scheduleArray,_scheduleIterable,_util_isInteropObservable,_util_isPromise,_util_isArrayLike,_util_isIterable PURE_IMPORTS_END */

//# sourceMappingURL=scheduleIterable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isInteropObservable.js

/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */

//# sourceMappingURL=isInteropObservable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isIterable.js

/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */

//# sourceMappingURL=combineLatest.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduled/scheduleObservable.js

/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable PURE_IMPORTS_END */

//# sourceMappingURL=scheduleObservable.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduled/schedulePromise.js

//# sourceMappingURL=schedulePromise.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/scheduled/scheduleIterable.js

/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */

//# sourceMappingURL=scheduled.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/from.js

/** PURE_IMPORTS_START _Observable,_util_subscribeTo,_scheduled_scheduled PURE_IMPORTS_END */

//# sourceMappingURL=from.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeMap.js

/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber,_map,_observable_from PURE_IMPORTS_END */

//# sourceMappingURL=mergeMap.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/mergeAll.js

/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */

//# sourceMappingURL=mergeAll.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/concatAll.js

/** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */

//# sourceMappingURL=concatAll.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/concat.js

/** PURE_IMPORTS_START _of,_operators_concatAll PURE_IMPORTS_END */

//# sourceMappingURL=concat.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/defer.js

/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */

//# sourceMappingURL=defer.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/forkJoin.js

/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */

//# sourceMappingURL=forkJoin.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/fromEvent.js

/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */

//# sourceMappingURL=fromEvent.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/fromEventPattern.js

//# sourceMappingURL=fromEventPattern.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/generate.js

/** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */

//# sourceMappingURL=generate.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/iif.js

/** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */

//# sourceMappingURL=iif.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/isNumeric.js

/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */

//# sourceMappingURL=isNumeric.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/interval.js

/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */

//# sourceMappingURL=interval.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/merge.js

/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */

//# sourceMappingURL=merge.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/never.js

/** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */

//# sourceMappingURL=never.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/onErrorResumeNext.js

/** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */

//# sourceMappingURL=onErrorResumeNext.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/pairs.js

//# sourceMappingURL=pairs.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/util/not.js

//# sourceMappingURL=not.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/operators/filter.js

//# sourceMappingURL=filter.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/partition.js

/** PURE_IMPORTS_START _util_not,_util_subscribeTo,_operators_filter,_Observable PURE_IMPORTS_END */

//# sourceMappingURL=partition.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/race.js

/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

//# sourceMappingURL=race.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/range.js

//# sourceMappingURL=range.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/timer.js

/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */

//# sourceMappingURL=timer.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/using.js

//# sourceMappingURL=using.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/internal/observable/zip.js

/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */

//# sourceMappingURL=zip.js.map

// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/index.js

/* concated harmony reexport Observable */

/* concated harmony reexport ConnectableObservable */

/* concated harmony reexport GroupedObservable */

/* concated harmony reexport observable */

/* concated harmony reexport Subject */

/* concated harmony reexport BehaviorSubject */

/* concated harmony reexport ReplaySubject */

/* concated harmony reexport AsyncSubject */

/* concated harmony reexport asapScheduler */

/* concated harmony reexport asyncScheduler */

/* concated harmony reexport queueScheduler */

/* concated harmony reexport animationFrameScheduler */

/* concated harmony reexport VirtualTimeScheduler */

/* concated harmony reexport VirtualAction */

/* concated harmony reexport Scheduler */

/* concated harmony reexport Subscription */

/* concated harmony reexport Subscriber */

/* concated harmony reexport Notification */

/* concated harmony reexport NotificationKind */

/* concated harmony reexport pipe */

/* concated harmony reexport noop */

/* concated harmony reexport identity */

/* concated harmony reexport isObservable */

/* concated harmony reexport ArgumentOutOfRangeError */

/* concated harmony reexport EmptyError */

/* concated harmony reexport ObjectUnsubscribedError */

/* concated harmony reexport UnsubscriptionError */

/* concated harmony reexport TimeoutError */

/* concated harmony reexport bindCallback */

/* concated harmony reexport bindNodeCallback */

/* concated harmony reexport combineLatest */

/* concated harmony reexport concat */

/* concated harmony reexport defer */

/* concated harmony reexport empty */

/* concated harmony reexport forkJoin */

/* concated harmony reexport from */

/* concated harmony reexport fromEvent */

/* concated harmony reexport fromEventPattern */

/* concated harmony reexport generate */

/* concated harmony reexport iif */

/* concated harmony reexport interval */

/* concated harmony reexport merge */

/* concated harmony reexport never */

/* concated harmony reexport of */

/* concated harmony reexport onErrorResumeNext */

/* concated harmony reexport pairs */

/* concated harmony reexport partition */

/* concated harmony reexport race */

/* concated harmony reexport range */

/* concated harmony reexport throwError */

/* concated harmony reexport timer */

/* concated harmony reexport using */

/* concated harmony reexport zip */

/* concated harmony reexport scheduled */

/* concated harmony reexport EMPTY */

/* concated harmony reexport NEVER */

/* concated harmony reexport config */

/* 444 */

// EXTERNAL MODULE: ./node_modules/web3/dist/web3.umd.js

// CONCATENATED MODULE: ./src/contractProvider.ts

// @todo waiting for NAGY

/*yield*/

/**add here some content ID (maybe?) */

// @todo what do we return? Consult Nagy

/*return*/
